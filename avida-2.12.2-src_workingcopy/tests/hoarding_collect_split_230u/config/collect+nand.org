h-alloc    # Allocate space for child
h-search   # Locate the end of the organism
nop-C      #
nop-A      #
mov-head   # Place write-head at beginning of offspring.
nop-C      #
collect    # Collect resource (with no nop modifiers)
IO         # I/O into the BX register
nop-B      # 
IO         # I/O into the CX register
nop-C      # 
nand       # Nand BX and CX, and place the result in the BX register
nop-B      # 
IO         # I/O from the BX register, triggering "nand" task
nop-B      # 
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
nop-C      #
h-search   # Mark the beginning of the copy loop
h-copy     # Do the copy
if-label   # If we're done copying....
nop-C      #
nop-A      #
h-divide   #    ...divide!
mov-head   # Otherwise, loop back to the beginning of the copy loop.
nop-A      # End label.
nop-B      #
