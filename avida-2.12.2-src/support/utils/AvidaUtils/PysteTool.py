##############################################################################
## Copyright (C) 1999-2005 Michigan State University                        ##
## Based on work Copyright (C) 1993-2003 California Institute of Technology ##
##                                                                          ##
## Read the COPYING and README files, or contact 'avida@alife.org',         ##
## before continuing.  SOME RESTRICTIONS MAY APPLY TO USE OF THIS FILE.     ##
##############################################################################

"""
PysteTool

Tool-specific initialization for Boost.Python's Pyste.

Provides a chain of SCons builders that can be used to generate a Python
package from a set of Pyste files, and an SCons scanner to determine the
dependencies of a given Pyste file.

Depends upon BoostPythonTool and PythonTool.
"""

import BoostPythonTool

import SCons
import os
import sys

missing_pyste_package_name_error_msg = """
Pyste package name must be specified using key 'pyste_package_name' in
PystePackage builder. Example:

environment.PystePackage(
  [
    'foo.pyste'
  ],
  pyste_package_name = "bar"
)
"""

def _keyCheck(env, key):
  if env.Dictionary().has_key(key): return env[key]

def PysteScanner():
  """
  A classic CPP-style include-scanner, customized to scan .pyste files for
  dependencies.
  """
  return SCons.Scanner.Classic('PysteScanner', ['.pyste',], 'CPPPATH', """["'](\S*?\.h|\S*?\.pyste)["']""")

def PysteRecursiveScanner(node, env, path):
  """
  Recursively calls scanner corresponding to type of file being scanned, if
  scanner is available. If file is a .pyste file, calls PysteScanner
  instance.
  """
  pyste_scanner = PysteScanner()
  scanner_key = node.scanner_key()
  if scanner_key in pyste_scanner.skeys: return pyste_scanner(node,env,path)
  else:
    scanner = env.get_scanner(scanner_key)
    if scanner: return scanner(node,env,path)
    else: return []

def PystePackageSubmoduleEmitter(target, source, env):
  """
  Used by PystePackageSubmodule builders, which build Python modules from
  generated c++ code, to locate the Python package subdirectory where a
  particular new module should be placed.
  """
  try:
    pyste_package_name = env.overrides["pyste_package_name"]
  except:
    raise SCons.Errors.UserError, missing_pyste_package_name_error_msg
  new_target_list = []
  for tgt in target:
    head, tail = os.path.split(str(target[0]))
    base, ext = SCons.Util.splitext(str(tail))
    if ext == env.subst('$PYTHON_SO'):
      new_tgt_name = os.path.join(head, pyste_package_name, str(tail))
      new_target_list.append(new_tgt_name)
    else: new_target_list.append(tgt)
  return new_target_list, source

def PystePackageInitFileEmitter(target, source, env):
  """
  Used by PystePackage builders to locate the Python package subdirectory
  where a new Python package init file ('__init__.py') for the package
  should be placed.
  """
  try:
    pyste_package_name = env.overrides["pyste_package_name"]
  except:
    raise SCons.Errors.UserError, missing_pyste_package_name_error_msg
  head, tail = os.path.split(str(target[0]))
  init_file_name = os.path.join(head, '__init__.py')
  target = [init_file_name,]
  return target, source

def PystePackageInitFileAction(target, source, env):
  """
  Generates a new Python package init file ('__init__.py') to load the
  package's Python modules when the package is imported into a Python
  script.
  """
  try:
    pyste_package_name = env.overrides["pyste_package_name"]
  except:
    raise SCons.Errors.UserError, missing_pyste_package_name_error_msg
  init_file = open(str(target[0]), 'w')
  init_file.write('"""\n' +
"""Init file for package "%s".

Imports submodules comprising this package.  Autogenerated by SCons.
Changes to this file will be lost when Avida is rebuilt.
""" % pyste_package_name + '"""\n\n')
  for src in source:
    base, ext = SCons.Util.splitext(str(src))
    if ext in ('.pyste', env.subst('$PYTHON_SO')):
      head, tail = os.path.split(base)
      init_file.write('print "importing from %s%s ..."\n' % (tail, env.subst('$PYTHON_SO')))
      init_file.write('from %s import *\n\n' % tail)
  init_file.close()

def PystePackageEmitter(target, source, env):
  """
  Used by PystePackage builders to locate the subdirectory for the Python
  package being built.
  """
  try:
    pyste_package_name = env.overrides["pyste_package_name"]
  except:
    raise SCons.Errors.UserError, missing_pyste_package_name_error_msg
  pyste_package_dir, tail = os.path.split(str(target[0]))
  target = [pyste_package_dir,]
  return target, source

def PystePackageAction(target, source, env):
  """
  Makes a Python package subdirectory, if it doesn't already exist, to
  contain the package's Python modules.
  """
  try:
    pyste_package_name = env.overrides["pyste_package_name"]
  except:
    raise SCons.Errors.UserError, missing_pyste_package_name_error_msg
  if not os.path.exists(str(target[0])): os.makedirs(str(target[0]))

def generate(env):
  """
  Constructs a chain of SCons builders that can be used to generate a Python
  package from a set of Pyste files. Also constructs an SCons scanner to
  determine the dependencies of a given Pyste file. Adds the builders and
  scanners to the given environment.
  """
  # The Pyste cxx builder reads .pystec (Pyste cache) files, produced by the
  # Pyste package cache builder, and generates .pyste.cpp (regular c++)
  # files for use by the Pyste shared object builder.
  pyste_package_cxx_builder = SCons.Builder.Builder(
    action = SCons.Action.Action('$PYSTE_CMD --gccxml-path=$GCCXML_CMD $_CPPINCFLAGS $_CPPDEFFLAGS --out=$TARGET $SOURCE'),
    prefix = '',
    suffix = '$BOOST_PYTHON_CXX_SUFFIX',
    src_suffix = '.pyste',
    single_source = True
  )
  # The Pyste shared object builder reads .pyste.cpp (regular c++) files,
  # produced by the Pyste cxx builder, and generates .os (regular shared
  # object) files for use by the Pyste submodule builder.
  pyste_package_shared_object_builder = SCons.Builder.Builder(
    action = BoostPythonTool.ShCXXAction,
    prefix = '$SHOBJPREFIX',
    suffix = '$SHOBJSUFFIX',
    src_suffix = '$BOOST_PYTHON_CXX_SUFFIX',
    src_builder = 'PystePackageCXX',
    source_scanner = SCons.Tool.SourceFileScanner,
    single_source = True
  )
  # The Pyste submodule builder reads .os (regular shared object) files,
  # generated by the Pyste shared object builder, and generates .so (regular
  # loadabled shared module) comprising a Python package.
  pyste_package_submodule_builder = SCons.Builder.Builder(
    action = BoostPythonTool.LdModuleLinkAction,
    emitter = PystePackageSubmoduleEmitter,
    prefix = '',
    suffix = '$PYTHON_SO',
    target_scanner = SCons.Tool.ProgramScanner,
    src_suffix = '$SHOBJSUFFIX',
    src_builder = 'PystePackageSharedObject',
    single_source = True
  )
  # The Pyste init file builder is given a list of .pyste (Pyste) files, and
  # forwards the list to the Pyste submodule builder, which in turn
  # generates the Python submodules comprising a Python package. The Pyste
  # init file builder then generates a Python package init file
  # (__init__.py) that can load the Python submodules.
  pyste_package_init_file_builder = SCons.Builder.Builder(
    action = PystePackageInitFileAction,
    emitter = PystePackageInitFileEmitter,
    prefix = '__init__',
    suffix = '.py',
    src_builder = 'PystePackageSubmodule'
  )
  # The Pyste package builder is given a list of .pyste (Pyste) files, and
  # makes a subdirectory for a Python package. The Pyste package builder
  # then forwards the list of .pyste files to the Pyste init file builder,
  # which begins constructing the contents of the Python package.
  pyste_package_builder = SCons.Builder.Builder(
    action = PystePackageAction,
    emitter = PystePackageEmitter,
    src_builder = 'PystePackageInitFile',
    target_factory = SCons.Node.FS.default_fs.Dir
  )
  # The Pyste scanner, given a .pyste (Pyste) file, reads the file to
  # identify any header files loaded by the 'Include' directive, and any
  # Pyste files loaded by the 'Import' directive. It returns a list of any
  # such files identified. SCons uses this list to track file dependencies.
  pyste_scanner = SCons.Scanner.Base(
    function = PysteRecursiveScanner,
    name = 'PysteRecursiveScanner',
    skeys = ['.pyste',],
    path_function = SCons.Scanner.FindPathDirs(SCons.Node.FS.default_fs),
    recursive = True
  )
  env.AppendUnique(BUILDERS = {'PystePackageCXX' : pyste_package_cxx_builder})
  env.AppendUnique(BUILDERS = {'PystePackageSharedObject' : pyste_package_shared_object_builder})
  env.AppendUnique(BUILDERS = {'PystePackageSubmodule' : pyste_package_submodule_builder})
  env.AppendUnique(BUILDERS = {'PystePackageInitFile' : pyste_package_init_file_builder})
  env.AppendUnique(BUILDERS = {'PystePackage' : pyste_package_builder})
  env.AppendUnique(SCANNERS = pyste_scanner)

def exists(env):
  return True

